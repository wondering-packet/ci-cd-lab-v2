# A descriptive name for your workflow as it appears in the Actions tab.
name: pre-commit

# Defines the events that trigger this workflow.
on:
  # The workflow runs on every pull request. This ensures code is checked
  # before it can be merged.
  pull_request:

  # The workflow also runs on every push to the 'main' branch.
  # This acts as a final safety check.
  push:
    branches: [ main ]

# The 'jobs' section contains one or more jobs that run on the runner.
jobs:
  # The name of this specific job.
  pre-commit:
    # Specifies the type of virtual machine the job will run on.
    runs-on: ubuntu-latest

    # A sequence of steps that will be executed in this job.
    steps:
      # Step 1: Checks out your repository's code on the runner.
      # This is almost always the first step.
      - uses: actions/checkout@v4

      # Step 2: Sets up a specific version of Python.
      # This is necessary to run Python-based pre-commit hooks.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: This optional step caches the pre-commit environments.
      # It saves time on subsequent runs by not re-downloading all dependencies.
      - name: Cache pre-commit envs
        uses: actions/cache@v4
        with:
          # The directory to cache
          path: ~/.cache/pre-commit
          # A unique key for the cache based on the OS and the config file's hash.
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          # Restore from a cache that matches the OS if the exact key doesn't exist.
          restore-keys: |
            pre-commit-${{ runner.os }}-

      # Step 4: The core action that runs your pre-commit checks.
      # This single line handles the installation and execution of all hooks
      # defined in your .pre-commit-config.yaml file.
      - uses: pre-commit/action@v3.0.1
